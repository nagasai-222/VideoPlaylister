{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nagas\\\\Downloads\\\\VideoPlaylister\\\\Playlist-Manager-main\\\\client\\\\src\\\\store\\\\index.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nimport AuthContext from '../auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\n  LOAD_PLAYLISTS: 'LOAD_PLAYLISTS',\n  LOAD_PUBLISHED_PLAYLISTS: 'LOAD_PUBLISHED_PLAYLISTS',\n  MARK_LIST_FOR_DELETION: 'MARK_LIST_FOR_DELETION',\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\n  EDIT_SONG: 'EDIT_SONG',\n  REMOVE_SONG: 'REMOVE_SONG',\n  ACCESS_ERROR: 'ACCESS_ERROR',\n  HIDE_MODALS: 'HIDE_MODALS',\n  SET_SEARCH: 'SET_SEARCH',\n  SET_PLAY: 'SET_PLAY',\n  SET_SCREEN: 'SET_SCREEN',\n  SET_HOME_SCREEN: 'SET_HOME_SCREEN'\n};\nconst tps = new jsTPS();\nconst CurrentModal = {\n  NONE: 'NONE',\n  DELETE_LIST: 'DELETE_LIST',\n  EDIT_SONG: 'EDIT_SONG',\n  REMOVE_SONG: 'REMOVE_SONG',\n  ACCESS_ERROR: 'ACCESS_ERROR'\n};\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    currentModal: CurrentModal.NONE,\n    playlists: [],\n    PublishedPlaylists: [],\n    currentList: null,\n    currentSongIndex: -1,\n    currentSong: null,\n    listNameActive: false,\n    listIdMarkedForDeletion: null,\n    listMarkedForDeletion: null,\n    message: '',\n    search: null,\n    sortMethod: null,\n    playIndex: 0,\n    currentScreen: ''\n  });\n  const history = useHistory();\n  // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: payload.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: payload.playlist,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: payload,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: null,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.LOAD_PLAYLISTS:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: payload,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.LOAD_PUBLISHED_PLAYLISTS:\n        {\n          return setStore({\n            currentModal: CurrentModal,\n            playlists: store.playlists,\n            PublishedPlaylists: payload,\n            currentList: store.currentList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            currentModal: CurrentModal.DELETE_LIST,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: payload.id,\n            listMarkedForDeletion: payload.playlist,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: payload,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: 0,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: payload,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: true,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.EDIT_SONG,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.REMOVE_SONG:\n        {\n          return setStore({\n            currentModal: CurrentModal.REMOVE_SONG,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.HIDE_MODALS:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.ACCESS_ERROR:\n        {\n          return setStore({\n            currentModal: CurrentModal.ACCESS_ERROR,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.listIdMarkedForDeletion,\n            message: payload,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_SEARCH:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.markListForDeletion,\n            message: store.message,\n            search: payload,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_SORT:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.markListForDeletion,\n            message: store.message,\n            search: store.search,\n            sortMethod: payload,\n            playIndex: store.playIndex,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_PLAY:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: store.currentList,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.markListForDeletion,\n            message: store.message,\n            search: store.search,\n            sortMethod: store.sortMethod,\n            playIndex: payload,\n            currentScreen: store.currentScreen\n          });\n        }\n      case GlobalStoreActionType.SET_SCREEN:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: store.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: null,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.markListForDeletion,\n            message: store.message,\n            search: null,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: payload\n          });\n        }\n      case GlobalStoreActionType.SET_HOME_SCREEN:\n        {\n          return setStore({\n            currentModal: CurrentModal.NONE,\n            playlists: payload.playlists,\n            PublishedPlaylists: store.PublishedPlaylists,\n            currentList: null,\n            currentSongIndex: store.currentSongIndex,\n            currentSong: store.currentSong,\n            listNameActive: store.listNameActive,\n            listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n            listMarkedForDeletion: store.markListForDeletion,\n            message: store.message,\n            search: null,\n            sortMethod: store.sortMethod,\n            playIndex: store.playIndex,\n            currentScreen: payload.screen\n          });\n        }\n      default:\n        return store;\n    }\n  };\n\n  /// Screen\n  store.setScreen = screen => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SCREEN,\n      payload: screen\n    });\n  };\n  store.setHomeScreen = screen => {\n    async function asyncLoadPlaylists() {\n      const response = await api.getPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.SET_HOME_SCREEN,\n          payload: {\n            screen: screen,\n            playlist: playlists\n          }\n        });\n      } else {\n        console.log('API FAILED TO GET PLAYLISTS');\n      }\n    }\n    asyncLoadPlaylists();\n  };\n\n  /// Play\n  store.setPlay = playIndex => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_PLAY,\n      payload: playIndex\n    });\n  };\n\n  /// Searching\n  store.setSearch = search => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SEARCH,\n      payload: search\n    });\n  };\n  /// Sorting\n  store.setSort = sortMethod => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SORT,\n      payload: sortMethod\n    });\n  };\n  store.changeListName = function (id, newName) {\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          try {\n            response = await api.updatePlaylistNameById(playlist._id, playlist);\n            if (response.data.success) {\n              let newCurrentList = response.data.list;\n              async function getPlaylists() {\n                response = await api.getPlaylists();\n                if (response.data.success) {\n                  let NewPlaylists = response.data.playlists;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      playlists: NewPlaylists,\n                      playlist: newCurrentList\n                    }\n                  });\n                }\n              }\n              getPlaylists();\n            }\n          } catch (error) {\n            storeReducer({\n              type: GlobalStoreActionType.ACCESS_ERROR,\n              payload: 'Playlist With Same Name Already Exists'\n            });\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.clearTransaction = function () {\n    tps.clearAllTransactions();\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = async function () {\n    let newListName = 'Untitled';\n    const response = await api.createPlaylist(newListName, [], auth.user.email, [], auth.user.userName);\n    console.log('createNewList response: ' + response);\n    if (response.status === 201) {\n      tps.clearAllTransactions();\n      let newList = response.data.playlist;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      });\n    } else {\n      console.log('API FAILED TO CREATE A NEW LIST');\n    }\n  };\n  store.duplicate = async function (id, published) {\n    let response = '';\n    if (published) {\n      response = await api.getPublishedPlaylistById(id);\n    } else {\n      response = await api.getPlaylistById(id);\n    }\n    if (response.status === 200) {\n      let playlist = response.data.playlist;\n      const response2 = await api.createPlaylist(playlist.name, playlist.songs, auth.user.email, [], auth.user.userName);\n      if (response2.status === 201) {\n        tps.clearAllTransactions();\n        storeReducer({\n          type: GlobalStoreActionType.ACCESS_ERROR,\n          payload: 'Playlist Successfully Duplicated To Home'\n        });\n      } else {\n        console.log('API FAILED TO CREATE A NEW LIST');\n      }\n    } else {\n      console.log('API FAILED TO DUPLICATE TRYING TO GET LIST ');\n    }\n  };\n  store.LoadPlaylists = function () {\n    async function asyncLoadPlaylists() {\n      const response = await api.getPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_PLAYLISTS,\n          payload: playlists\n        });\n      } else {\n        console.log('API FAILED TO GET PLAYLISTS');\n      }\n    }\n    asyncLoadPlaylists();\n  };\n  store.LoadPublishedPlaylists = function () {\n    async function asyncLoadPublishedPlaylists() {\n      const response = await api.getPublishedPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_PUBLISHED_PLAYLISTS,\n          payload: playlists\n        });\n      } else {\n        console.log('API FAILED TO GET PUBLISHED PLAYLISTS');\n      }\n    }\n    asyncLoadPublishedPlaylists();\n  };\n  store.AddComment = function (comment) {\n    async function asyncUpdateCurrentList() {\n      store.currentList.comments.push({\n        userName: auth.user.userName,\n        comment: comment,\n        initials: auth.getUserInitials()\n      });\n      const response = await api.updatePublishedPlaylistComments(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.scrollUp = element => {\n    let elem = document.getElementById(element);\n    elem.scrollTop = elem.scrollHeight;\n  };\n  store.AddListen = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.listens++;\n        response = await api.updatePublishedPlaylistListens(playlist._id, playlist);\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n  store.AddLike = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.likes++;\n        response = await api.updatePublishedPlaylistByLike(playlist._id, playlist);\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n  store.AddDislike = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.dislikes++;\n        response = await api.updatePublishedPlaylistByDislike(playlist._id, playlist);\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n  store.publishList = function (id) {\n    let list = store.currentList;\n    list.published = true;\n    async function asyncPublishPlaylist(id, list) {\n      const response = await api.updatePlaylistById(id, list);\n      if (response.data.success) {\n        store.LoadPlaylists();\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      } else {\n        console.log('API FAILED TO UPDATE Playlist');\n      }\n    }\n    asyncPublishPlaylist(id, list);\n  };\n  store.setPublishedList = function (id) {\n    async function asyncSetPublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n        }\n      }\n    }\n    asyncSetPublishedList(id);\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.list\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      try {\n        let response = await api.getPlaylistById(id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: playlist\n            });\n          }\n        }\n      } catch (error) {\n        storeReducer({\n          type: GlobalStoreActionType.ACCESS_ERROR,\n          payload: 'Access Error'\n        });\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.markListForDeletion = function (id) {\n    async function getListToDelete(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            id: id,\n            playlist: playlist\n          }\n        });\n      }\n    }\n    getListToDelete(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.currentList = null;\n        if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();else store.LoadPublishedPlaylists();\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listIdMarkedForDeletion);\n    store.hideModals();\n  };\n  store.showEditSongModal = (songIndex, songToEdit) => {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToEdit\n      }\n    });\n  };\n  store.showRemoveSongModal = (songIndex, songToRemove) => {\n    storeReducer({\n      type: GlobalStoreActionType.REMOVE_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToRemove\n      }\n    });\n  };\n  store.hideModals = () => {\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_MODALS,\n      payload: {}\n    });\n  };\n  store.isDeleteListModalOpen = () => {\n    return store.currentModal === CurrentModal.DELETE_LIST;\n  };\n  store.isEditSongModalOpen = () => {\n    return store.currentModal === CurrentModal.EDIT_SONG;\n  };\n  store.isRemoveSongModalOpen = () => {\n    return store.currentModal === CurrentModal.REMOVE_SONG;\n  };\n  store.isAccessErrorModalOpen = () => {\n    return store.currentModal === CurrentModal.ACCESS_ERROR;\n  };\n  store.getplaylistsize = function () {\n    return store.currentList.songs.length;\n  };\n  store.addNewSong = function () {\n    let index = this.getplaylistsize();\n    this.addCreateSongTransaction(index, 'Untitled', '?', 'TO-_3tck2tg');\n  };\n  // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n  // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n  store.createSong = function (index, song) {\n    let list = store.currentList;\n    list.songs.splice(index, 0, song);\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n  // FROM THE CURRENT LIST\n  store.removeSong = function (index) {\n    let list = store.currentList;\n    list.songs.splice(index, 1);\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n  store.updateSong = function (index, songData) {\n    let list = store.currentList;\n    let song = list.songs[index];\n    song.title = songData.title;\n    song.artist = songData.artist;\n    song.youTubeId = songData.youTubeId;\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  store.addNewSong = () => {\n    let playlistsize = store.getplaylistsize();\n    store.addCreateSongTransaction(playlistsize, 'Untitled', '?', 'TO-_3tck2tg');\n  };\n  // THIS FUNCTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n  store.addRemoveSongTransaction = () => {\n    let index = store.currentSongIndex;\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addUpdateSongTransaction = function (index, newSongData) {\n    let song = store.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId\n    };\n    let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n    tps.addTransaction(transaction);\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canAddNewSong = function () {\n    return store.currentList !== null;\n  };\n  store.canUndo = function () {\n    return store.currentList !== null && tps.hasTransactionToUndo();\n  };\n  store.canRedo = function () {\n    return store.currentList !== null && tps.hasTransactionToRedo();\n  };\n  store.canClose = function () {\n    return store.currentList !== null;\n  };\n\n  //// All of the Sort Methods\n  store.SortName = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n      if (nameA > nameB) {\n        return 1;\n      }\n      if (nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  };\n  store.SortCreationDate = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.date;\n      const nameB = b.date;\n      if (nameA > nameB) {\n        return 1;\n      }\n      if (nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  };\n  store.SortLastEdit = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = new Date(a.lastEdit);\n      const nameB = new Date(b.lastEdit);\n      return nameB - nameA;\n    });\n  };\n  store.SortPublishedDate = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = new Date(a.publishedDate);\n      const nameB = new Date(b.publishedDate);\n      return nameA - nameB;\n    });\n  };\n  store.SortMostListens = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.listens;\n      const nameB = b.listens;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  store.SortMostLikes = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.likes;\n      const nameB = b.likes;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  store.SortMostDislikes = playlists => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.dislikes;\n      const nameB = b.dislikes;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 973,\n    columnNumber: 5\n  }, this);\n}\n_s(GlobalStoreContextProvider, \"dEmXqfPioVD1AwMLXg7fVTJYV40=\", false, function () {\n  return [useHistory];\n});\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\nvar _c;\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useHistory","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CREATE_NEW_LIST","LOAD_PLAYLISTS","LOAD_PUBLISHED_PLAYLISTS","MARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SONG","REMOVE_SONG","ACCESS_ERROR","HIDE_MODALS","SET_SEARCH","SET_PLAY","SET_SCREEN","SET_HOME_SCREEN","tps","CurrentModal","NONE","DELETE_LIST","GlobalStoreContextProvider","props","auth","store","setStore","currentModal","playlists","PublishedPlaylists","currentList","currentSongIndex","currentSong","listNameActive","listIdMarkedForDeletion","listMarkedForDeletion","message","search","sortMethod","playIndex","currentScreen","history","storeReducer","action","type","payload","playlist","id","markListForDeletion","SET_SORT","screen","setScreen","setHomeScreen","asyncLoadPlaylists","response","getPlaylists","data","success","console","log","setPlay","setSearch","setSort","changeListName","newName","asyncChangeListName","getPlaylistById","name","updateList","updatePlaylistNameById","_id","newCurrentList","list","NewPlaylists","error","setIsListNameEditActive","clearTransaction","clearAllTransactions","createNewList","newListName","createPlaylist","user","email","userName","status","newList","duplicate","published","getPublishedPlaylistById","response2","songs","LoadPlaylists","LoadPublishedPlaylists","asyncLoadPublishedPlaylists","getPublishedPlaylists","AddComment","comment","asyncUpdateCurrentList","comments","push","initials","getUserInitials","updatePublishedPlaylistComments","scrollUp","element","elem","document","getElementById","scrollTop","scrollHeight","AddListen","asyncUpdatePublishedList","listens","updatePublishedPlaylistListens","AddLike","likes","updatePublishedPlaylistByLike","AddDislike","dislikes","updatePublishedPlaylistByDislike","publishList","asyncPublishPlaylist","updatePlaylistById","setPublishedList","asyncSetPublishedList","updateCurrentList","setCurrentList","asyncSetCurrentList","getListToDelete","deleteList","processDelete","deletePlaylistById","deleteMarkedList","hideModals","showEditSongModal","songIndex","songToEdit","showRemoveSongModal","songToRemove","isDeleteListModalOpen","isEditSongModalOpen","isRemoveSongModalOpen","isAccessErrorModalOpen","getplaylistsize","length","addNewSong","index","addCreateSongTransaction","createSong","song","splice","moveSong","start","end","temp","i","removeSong","updateSong","songData","title","artist","youTubeId","playlistsize","transaction","addTransaction","addMoveSongTransaction","addRemoveSongTransaction","addUpdateSongTransaction","newSongData","oldSongData","undo","undoTransaction","redo","doTransaction","canAddNewSong","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","canClose","SortName","sort","a","b","nameA","toUpperCase","nameB","SortCreationDate","date","SortLastEdit","Date","lastEdit","SortPublishedDate","publishedDate","SortMostListens","SortMostLikes","SortMostDislikes","children"],"sources":["C:/Users/nagas/Downloads/VideoPlaylister/Playlist-Manager-main/client/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nimport AuthContext from '../auth';\n\nexport const GlobalStoreContext = createContext({});\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\n  LOAD_PLAYLISTS: 'LOAD_PLAYLISTS',\n  LOAD_PUBLISHED_PLAYLISTS: 'LOAD_PUBLISHED_PLAYLISTS',\n  MARK_LIST_FOR_DELETION: 'MARK_LIST_FOR_DELETION',\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\n  EDIT_SONG: 'EDIT_SONG',\n  REMOVE_SONG: 'REMOVE_SONG',\n  ACCESS_ERROR: 'ACCESS_ERROR',\n  HIDE_MODALS: 'HIDE_MODALS',\n  SET_SEARCH: 'SET_SEARCH',\n  SET_PLAY: 'SET_PLAY',\n  SET_SCREEN: 'SET_SCREEN',\n  SET_HOME_SCREEN: 'SET_HOME_SCREEN',\n};\n\nconst tps = new jsTPS();\nconst CurrentModal = {\n  NONE: 'NONE',\n  DELETE_LIST: 'DELETE_LIST',\n  EDIT_SONG: 'EDIT_SONG',\n  REMOVE_SONG: 'REMOVE_SONG',\n  ACCESS_ERROR: 'ACCESS_ERROR',\n};\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n  const { auth } = useContext(AuthContext);\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    currentModal: CurrentModal.NONE,\n    playlists: [],\n    PublishedPlaylists: [],\n    currentList: null,\n    currentSongIndex: -1,\n    currentSong: null,\n    listNameActive: false,\n    listIdMarkedForDeletion: null,\n    listMarkedForDeletion: null,\n    message: '',\n    search: null,\n    sortMethod: null,\n    playIndex: 0,\n    currentScreen: '',\n  });\n  const history = useHistory();\n  // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = (action) => {\n    const { type, payload } = action;\n    switch (type) {\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: payload.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: payload.playlist,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: payload,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: null,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.LOAD_PLAYLISTS: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: payload,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.LOAD_PUBLISHED_PLAYLISTS: {\n        return setStore({\n          currentModal: CurrentModal,\n          playlists: store.playlists,\n          PublishedPlaylists: payload,\n          currentList: store.currentList,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n        return setStore({\n          currentModal: CurrentModal.DELETE_LIST,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: payload.id,\n          listMarkedForDeletion: payload.playlist,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: payload,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: 0,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: payload,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: true,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.EDIT_SONG: {\n        return setStore({\n          currentModal: CurrentModal.EDIT_SONG,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: payload.currentSongIndex,\n          currentSong: payload.currentSong,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.REMOVE_SONG: {\n        return setStore({\n          currentModal: CurrentModal.REMOVE_SONG,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: payload.currentSongIndex,\n          currentSong: payload.currentSong,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.HIDE_MODALS: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: -1,\n          currentSong: null,\n          listNameActive: false,\n          listIdMarkedForDeletion: null,\n          listMarkedForDeletion: null,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.ACCESS_ERROR: {\n        return setStore({\n          currentModal: CurrentModal.ACCESS_ERROR,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.listIdMarkedForDeletion,\n          message: payload,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_SEARCH: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.markListForDeletion,\n          message: store.message,\n          search: payload,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_SORT: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.markListForDeletion,\n          message: store.message,\n          search: store.search,\n          sortMethod: payload,\n          playIndex: store.playIndex,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_PLAY: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: store.currentList,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.markListForDeletion,\n          message: store.message,\n          search: store.search,\n          sortMethod: store.sortMethod,\n          playIndex: payload,\n          currentScreen: store.currentScreen,\n        });\n      }\n      case GlobalStoreActionType.SET_SCREEN: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: store.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: null,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.markListForDeletion,\n          message: store.message,\n          search: null,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: payload,\n        });\n      }\n      case GlobalStoreActionType.SET_HOME_SCREEN: {\n        return setStore({\n          currentModal: CurrentModal.NONE,\n          playlists: payload.playlists,\n          PublishedPlaylists: store.PublishedPlaylists,\n          currentList: null,\n          currentSongIndex: store.currentSongIndex,\n          currentSong: store.currentSong,\n          listNameActive: store.listNameActive,\n          listIdMarkedForDeletion: store.listIdMarkedForDeletion,\n          listMarkedForDeletion: store.markListForDeletion,\n          message: store.message,\n          search: null,\n          sortMethod: store.sortMethod,\n          playIndex: store.playIndex,\n          currentScreen: payload.screen,\n        });\n      }\n      default:\n        return store;\n    }\n  };\n\n  /// Screen\n  store.setScreen = (screen) => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SCREEN,\n      payload: screen,\n    });\n  };\n  store.setHomeScreen = (screen) => {\n    async function asyncLoadPlaylists() {\n      const response = await api.getPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.SET_HOME_SCREEN,\n          payload: {\n            screen: screen,\n            playlist: playlists,\n          },\n        });\n      } else {\n        console.log('API FAILED TO GET PLAYLISTS');\n      }\n    }\n    asyncLoadPlaylists();\n  };\n\n  /// Play\n  store.setPlay = (playIndex) => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_PLAY,\n      payload: playIndex,\n    });\n  };\n\n  /// Searching\n  store.setSearch = (search) => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SEARCH,\n      payload: search,\n    });\n  };\n  /// Sorting\n  store.setSort = (sortMethod) => {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SORT,\n      payload: sortMethod,\n    });\n  };\n\n  store.changeListName = function (id, newName) {\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          try {\n            response = await api.updatePlaylistNameById(playlist._id, playlist);\n            if (response.data.success) {\n              let newCurrentList = response.data.list;\n              async function getPlaylists() {\n                response = await api.getPlaylists();\n                if (response.data.success) {\n                  let NewPlaylists = response.data.playlists;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      playlists: NewPlaylists,\n                      playlist: newCurrentList,\n                    },\n                  });\n                }\n              }\n              getPlaylists();\n            }\n          } catch (error) {\n            storeReducer({\n              type: GlobalStoreActionType.ACCESS_ERROR,\n              payload: 'Playlist With Same Name Already Exists',\n            });\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null,\n    });\n  };\n\n  store.clearTransaction = function () {\n    tps.clearAllTransactions();\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = async function () {\n    let newListName = 'Untitled';\n    const response = await api.createPlaylist(\n      newListName,\n      [],\n      auth.user.email,\n      [],\n      auth.user.userName\n    );\n    console.log('createNewList response: ' + response);\n    if (response.status === 201) {\n      tps.clearAllTransactions();\n      let newList = response.data.playlist;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList,\n      });\n    } else {\n      console.log('API FAILED TO CREATE A NEW LIST');\n    }\n  };\n  store.duplicate = async function (id, published) {\n    let response = '';\n    if (published) {\n      response = await api.getPublishedPlaylistById(id);\n    } else {\n      response = await api.getPlaylistById(id);\n    }\n    if (response.status === 200) {\n      let playlist = response.data.playlist;\n      const response2 = await api.createPlaylist(\n        playlist.name,\n        playlist.songs,\n        auth.user.email,\n        [],\n        auth.user.userName\n      );\n      if (response2.status === 201) {\n        tps.clearAllTransactions();\n        storeReducer({\n          type: GlobalStoreActionType.ACCESS_ERROR,\n          payload: 'Playlist Successfully Duplicated To Home',\n        });\n      } else {\n        console.log('API FAILED TO CREATE A NEW LIST');\n      }\n    } else {\n      console.log('API FAILED TO DUPLICATE TRYING TO GET LIST ');\n    }\n  };\n\n  store.LoadPlaylists = function () {\n    async function asyncLoadPlaylists() {\n      const response = await api.getPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_PLAYLISTS,\n          payload: playlists,\n        });\n      } else {\n        console.log('API FAILED TO GET PLAYLISTS');\n      }\n    }\n    asyncLoadPlaylists();\n  };\n  store.LoadPublishedPlaylists = function () {\n    async function asyncLoadPublishedPlaylists() {\n      const response = await api.getPublishedPlaylists();\n      if (response.data.success) {\n        let playlists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_PUBLISHED_PLAYLISTS,\n          payload: playlists,\n        });\n      } else {\n        console.log('API FAILED TO GET PUBLISHED PLAYLISTS');\n      }\n    }\n    asyncLoadPublishedPlaylists();\n  };\n  store.AddComment = function (comment) {\n    async function asyncUpdateCurrentList() {\n      store.currentList.comments.push({\n        userName: auth.user.userName,\n        comment: comment,\n        initials: auth.getUserInitials(),\n      });\n      const response = await api.updatePublishedPlaylistComments(\n        store.currentList._id,\n        store.currentList\n      );\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList,\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n\n  store.scrollUp = (element) => {\n    let elem = document.getElementById(element);\n    elem.scrollTop = elem.scrollHeight;\n  };\n\n  store.AddListen = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.listens++;\n        response = await api.updatePublishedPlaylistListens(\n          playlist._id,\n          playlist\n        );\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();\n          else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n\n  store.AddLike = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.likes++;\n        response = await api.updatePublishedPlaylistByLike(\n          playlist._id,\n          playlist\n        );\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();\n          else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n\n  store.AddDislike = function (id) {\n    async function asyncUpdatePublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.dislikes++;\n        response = await api.updatePublishedPlaylistByDislike(\n          playlist._id,\n          playlist\n        );\n        if (response.data.success) {\n          if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();\n          else {\n            store.LoadPublishedPlaylists();\n          }\n        }\n      }\n    }\n    asyncUpdatePublishedList(id);\n  };\n\n  store.publishList = function (id) {\n    let list = store.currentList;\n    list.published = true;\n    async function asyncPublishPlaylist(id, list) {\n      const response = await api.updatePlaylistById(id, list);\n      if (response.data.success) {\n        store.LoadPlaylists();\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList,\n        });\n      } else {\n        console.log('API FAILED TO UPDATE Playlist');\n      }\n    }\n    asyncPublishPlaylist(id, list);\n  };\n\n  store.setPublishedList = function (id) {\n    async function asyncSetPublishedList(id) {\n      let response = await api.getPublishedPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist,\n          });\n        }\n      }\n    }\n    asyncSetPublishedList(id);\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updatePlaylistById(\n        store.currentList._id,\n        store.currentList\n      );\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.list,\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      try {\n        let response = await api.getPlaylistById(id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: playlist,\n            });\n          }\n        }\n      } catch (error) {\n        storeReducer({\n          type: GlobalStoreActionType.ACCESS_ERROR,\n          payload: 'Access Error',\n        });\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n\n  store.markListForDeletion = function (id) {\n    async function getListToDelete(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: { id: id, playlist: playlist },\n        });\n      }\n    }\n    getListToDelete(id);\n  };\n  store.deleteList = function (id) {\n    async function processDelete(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.currentList = null;\n        if (store.currentScreen === 'HomeScreen') store.LoadPlaylists();\n        else store.LoadPublishedPlaylists();\n      }\n    }\n    processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listIdMarkedForDeletion);\n    store.hideModals();\n  };\n\n  store.showEditSongModal = (songIndex, songToEdit) => {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG,\n      payload: { currentSongIndex: songIndex, currentSong: songToEdit },\n    });\n  };\n  store.showRemoveSongModal = (songIndex, songToRemove) => {\n    storeReducer({\n      type: GlobalStoreActionType.REMOVE_SONG,\n      payload: { currentSongIndex: songIndex, currentSong: songToRemove },\n    });\n  };\n  store.hideModals = () => {\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_MODALS,\n      payload: {},\n    });\n  };\n  store.isDeleteListModalOpen = () => {\n    return store.currentModal === CurrentModal.DELETE_LIST;\n  };\n  store.isEditSongModalOpen = () => {\n    return store.currentModal === CurrentModal.EDIT_SONG;\n  };\n  store.isRemoveSongModalOpen = () => {\n    return store.currentModal === CurrentModal.REMOVE_SONG;\n  };\n  store.isAccessErrorModalOpen = () => {\n    return store.currentModal === CurrentModal.ACCESS_ERROR;\n  };\n\n  store.getplaylistsize = function () {\n    return store.currentList.songs.length;\n  };\n  store.addNewSong = function () {\n    let index = this.getplaylistsize();\n    this.addCreateSongTransaction(index, 'Untitled', '?', 'TO-_3tck2tg');\n  };\n  // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n  // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n  store.createSong = function (index, song) {\n    let list = store.currentList;\n    list.songs.splice(index, 0, song);\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n  // FROM THE CURRENT LIST\n  store.removeSong = function (index) {\n    let list = store.currentList;\n    list.songs.splice(index, 1);\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n  store.updateSong = function (index, songData) {\n    let list = store.currentList;\n    let song = list.songs[index];\n    song.title = songData.title;\n    song.artist = songData.artist;\n    song.youTubeId = songData.youTubeId;\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList();\n  };\n  store.addNewSong = () => {\n    let playlistsize = store.getplaylistsize();\n    store.addCreateSongTransaction(\n      playlistsize,\n      'Untitled',\n      '?',\n      'TO-_3tck2tg'\n    );\n  };\n  // THIS FUNCTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId,\n    };\n    let transaction = new CreateSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n  store.addRemoveSongTransaction = () => {\n    let index = store.currentSongIndex;\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addUpdateSongTransaction = function (index, newSongData) {\n    let song = store.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId,\n    };\n    let transaction = new UpdateSong_Transaction(\n      this,\n      index,\n      oldSongData,\n      newSongData\n    );\n    tps.addTransaction(transaction);\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canAddNewSong = function () {\n    return store.currentList !== null;\n  };\n  store.canUndo = function () {\n    return store.currentList !== null && tps.hasTransactionToUndo();\n  };\n  store.canRedo = function () {\n    return store.currentList !== null && tps.hasTransactionToRedo();\n  };\n  store.canClose = function () {\n    return store.currentList !== null;\n  };\n\n  //// All of the Sort Methods\n  store.SortName = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n      if (nameA > nameB) {\n        return 1;\n      }\n      if (nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  };\n  store.SortCreationDate = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.date;\n      const nameB = b.date;\n      if (nameA > nameB) {\n        return 1;\n      }\n      if (nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  };\n  store.SortLastEdit = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = new Date(a.lastEdit);\n      const nameB = new Date(b.lastEdit);\n      return nameB - nameA;\n    });\n  };\n  store.SortPublishedDate = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = new Date(a.publishedDate);\n      const nameB = new Date(b.publishedDate);\n\n      return nameA - nameB;\n    });\n  };\n  store.SortMostListens = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.listens;\n      const nameB = b.listens;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  store.SortMostLikes = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.likes;\n      const nameB = b.likes;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  store.SortMostDislikes = (playlists) => {\n    return playlists.sort(function (a, b) {\n      const nameA = a.dislikes;\n      const nameB = b.dislikes;\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n\n  return (\n    <GlobalStoreContext.Provider\n      value={{\n        store,\n      }}\n    >\n      {props.children}\n    </GlobalStoreContext.Provider>\n  );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}