{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createPlaylist = (newListName, newSongs, email, newComments, Username) => {\n  return api.post(`/playlist/`, {\n    // SPECIFY THE PAYLOAD\n    name: newListName,\n    ownerEmail: email,\n    owner: Username,\n    date: new Date(),\n    lastEdit: new Date(),\n    published: false,\n    publishedDate: '-1',\n    listens: 0,\n    likes: 0,\n    dislikes: 0,\n    comments: newComments,\n    songs: newSongs\n  });\n};\nexport const deletePlaylistById = id => api.delete(`/playlist/${id}`);\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const getPlaylists = () => api.get(`/playlists/`);\nexport const updatePlaylistNameById = (id, playlist) => {\n  return api.put(`/playlist/Name/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nexport const updatePlaylistById = (id, playlist) => {\n  return api.put(`/playlist/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\n\n/// Published\nexport const getPublishedPlaylists = () => api.get(`/PublishedPlaylists/`);\nexport const getPublishedPlaylistById = id => api.get(`/PublishedPlaylists/${id}`);\nexport const updatePublishedPlaylistComments = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsComments/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nexport const updatePublishedPlaylistListens = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsListens/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nexport const updatePublishedPlaylistByLike = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsLikes/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nexport const updatePublishedPlaylistByDislike = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsDislikes/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nconst apis = {\n  createPlaylist,\n  deletePlaylistById,\n  getPlaylistById,\n  getPlaylists,\n  updatePlaylistById,\n  getPublishedPlaylists,\n  getPublishedPlaylistById,\n  updatePublishedPlaylistComments,\n  updatePublishedPlaylistByLike,\n  updatePublishedPlaylistByDislike,\n  updatePlaylistNameById,\n  updatePublishedPlaylistListens\n};\nexport default apis;","map":{"version":3,"names":["axios","defaults","withCredentials","api","create","baseURL","createPlaylist","newListName","newSongs","email","newComments","Username","post","name","ownerEmail","owner","date","Date","lastEdit","published","publishedDate","listens","likes","dislikes","comments","songs","deletePlaylistById","id","delete","getPlaylistById","get","getPlaylists","updatePlaylistNameById","playlist","put","updatePlaylistById","getPublishedPlaylists","getPublishedPlaylistById","updatePublishedPlaylistComments","updatePublishedPlaylistListens","updatePublishedPlaylistByLike","updatePublishedPlaylistByDislike","apis"],"sources":["C:/Users/nagas/Downloads/VideoPlaylister/Playlist-Manager-main/client/src/store/store-request-api/index.js"],"sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n});\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createPlaylist = (\n  newListName,\n  newSongs,\n  email,\n  newComments,\n  Username\n) => {\n  return api.post(`/playlist/`, {\n    // SPECIFY THE PAYLOAD\n    name: newListName,\n    ownerEmail: email,\n    owner: Username,\n    date: new Date(),\n    lastEdit: new Date(),\n    published: false,\n    publishedDate: '-1',\n    listens: 0,\n    likes: 0,\n    dislikes: 0,\n    comments: newComments,\n    songs: newSongs,\n  });\n};\nexport const deletePlaylistById = (id) => api.delete(`/playlist/${id}`);\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`);\nexport const getPlaylists = () => api.get(`/playlists/`);\nexport const updatePlaylistNameById = (id, playlist) => {\n  return api.put(`/playlist/Name/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\nexport const updatePlaylistById = (id, playlist) => {\n  return api.put(`/playlist/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\n\n/// Published\nexport const getPublishedPlaylists = () => api.get(`/PublishedPlaylists/`);\nexport const getPublishedPlaylistById = (id) =>\n  api.get(`/PublishedPlaylists/${id}`);\nexport const updatePublishedPlaylistComments = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsComments/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\nexport const updatePublishedPlaylistListens = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsListens/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\nexport const updatePublishedPlaylistByLike = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsLikes/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\nexport const updatePublishedPlaylistByDislike = (id, playlist) => {\n  return api.put(`/PublishedPlaylistsDislikes/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist,\n  });\n};\n\nconst apis = {\n  createPlaylist,\n  deletePlaylistById,\n  getPlaylistById,\n  getPlaylists,\n  updatePlaylistById,\n  getPublishedPlaylists,\n  getPublishedPlaylistById,\n  updatePublishedPlaylistComments,\n  updatePublishedPlaylistByLike,\n  updatePublishedPlaylistByDislike,\n  updatePlaylistNameById,\n  updatePublishedPlaylistListens,\n};\n\nexport default apis;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}