{"ast":null,"code":"/*\n    This is our http api for all things auth, which we use to \n    send authorization requests to our back-end API. Note we`re \n    using the Axios library for doing this, which is an easy to \n    use AJAX-based library. We could (and maybe should) use Fetch, \n    which is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/auth'\n});\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /register). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const getLoggedIn = () => api.get(`/loggedIn`);\nexport const loginUser = (email, password) => {\n  return api.post(`/login/`, {\n    email: email,\n    password: password\n  });\n};\nexport const logoutUser = () => api.get(`/logout/`);\nexport const registerUser = (userName, firstName, lastName, email, password, passwordVerify) => {\n  return api.post(`/register`, {\n    userName: userName,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    password: password,\n    passwordVerify: passwordVerify,\n    interactions: []\n  });\n};\nconst apis = {\n  getLoggedIn,\n  registerUser,\n  loginUser,\n  logoutUser\n};\nexport default apis;","map":{"version":3,"names":["axios","defaults","withCredentials","api","create","baseURL","getLoggedIn","get","loginUser","email","password","post","logoutUser","registerUser","userName","firstName","lastName","passwordVerify","interactions","apis"],"sources":["C:/Users/nagas/Downloads/VideoPlaylister/Playlist-Manager-main/client/src/auth/auth-request-api/index.js"],"sourcesContent":["/*\n    This is our http api for all things auth, which we use to \n    send authorization requests to our back-end API. Note we`re \n    using the Axios library for doing this, which is an easy to \n    use AJAX-based library. We could (and maybe should) use Fetch, \n    which is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/auth',\n});\n \n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /register). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const getLoggedIn = () => api.get(`/loggedIn`);\nexport const loginUser = (email, password) => {\n  return api.post(`/login/`, {\n    email: email,\n    password: password,\n  });\n};\nexport const logoutUser = () => api.get(`/logout/`);\nexport const registerUser = (\n  userName,\n  firstName,\n  lastName,\n  email,\n  password,\n  passwordVerify\n) => {\n  return api.post(`/register`, {\n    userName: userName,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    password: password,\n    passwordVerify: passwordVerify,\n    interactions: [],\n  });\n};\nconst apis = {\n  getLoggedIn,\n  registerUser,\n  loginUser,\n  logoutUser,\n};\n\nexport default apis;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzBA,KAAK,CAACC,QAAQ,CAACC,eAAe,GAAG,IAAI;AACrC,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAE,WAAU,CAAC;AACrD,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOP,GAAG,CAACQ,IAAI,CAAE,SAAQ,EAAE;IACzBF,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAME,UAAU,GAAG,MAAMT,GAAG,CAACI,GAAG,CAAE,UAAS,CAAC;AACnD,OAAO,MAAMM,YAAY,GAAG,CAC1BC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRP,KAAK,EACLC,QAAQ,EACRO,cAAc,KACX;EACH,OAAOd,GAAG,CAACQ,IAAI,CAAE,WAAU,EAAE;IAC3BG,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBC,QAAQ,EAAEA,QAAQ;IAClBP,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA,QAAQ;IAClBO,cAAc,EAAEA,cAAc;IAC9BC,YAAY,EAAE;EAChB,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,IAAI,GAAG;EACXb,WAAW;EACXO,YAAY;EACZL,SAAS;EACTI;AACF,CAAC;AAED,eAAeO,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}